basePath: /api/v1
definitions:
  model.User:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.ErrorResponse-string:
    properties:
      code:
        type: integer
      details:
        type: string
      message:
        type: string
    type: object
  response.SuccessResponse-model_User:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.User'
      message:
        type: string
    type: object
  response.SuccessResponse-service_LoginResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/service.LoginResponse'
      message:
        type: string
    type: object
  response.SuccessResponse-string:
    properties:
      code:
        type: integer
      data:
        type: string
      message:
        type: string
    type: object
  service.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  service.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  service.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  service.RegisterRequest:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact: {}
  description: API server for Flagon application
  title: Flagon API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.SuccessResponse-service_LoginResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse-string'
      summary: Login user
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidate current access token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.SuccessResponse-string'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse-string'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse-string'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/service.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse-service_LoginResponse'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/response.ErrorResponse-string'
      summary: Refresh access token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/response.SuccessResponse-model_User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse-string'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
